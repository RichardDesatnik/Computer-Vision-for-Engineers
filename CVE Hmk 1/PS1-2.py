#Import opencv libraries
import cv2

#Using python input function to get string input from the user

#Takes in string file name to be used for program
file = input("What file do you want to use? ")

#Emphasizes light or dark depending on the input from the user.
#If user types light the varible l_or_d becomes the string light
#If user types in dark the varible l_or_d becomes the string dark
#This will be used in the if statement to determine which regions the program should focus on 
l_or_d = input("Do you want to emphasize light or dark regions? Please type only light or dark")

#Display windows of image
#To display windows for the user to view the images I use open cv's named Window 
#function as placeholders to display images that are generated by the 
#program. The winname is the string used to address the window, in this case 
# my winnames are "input color image", "grayscale image", "black and white image", and 
# "Output color image" the flag cv2.WINDOW_NORMAL enables me to resize the 
# output image manuelly. I used the cv2.resizeWindow function to specify the size, the resizeWindow
#function takes in the windows name, width and height of the image, in this case I select 
#450 by 340
#Original image Display 
cv2.namedWindow("input color image", cv2.WINDOW_NORMAL)
cv2.resizeWindow("input color image", 450, 340) 
#gray scale version of image
cv2.namedWindow("grayscale image", cv2.WINDOW_NORMAL)
cv2.resizeWindow("grayscale image", 450, 340) 
#black and white version of image
cv2.namedWindow("black and white image", cv2.WINDOW_NORMAL)
cv2.resizeWindow("black and white image", 450, 340) 
#image with red overlay
cv2.namedWindow("Output color image", cv2.WINDOW_NORMAL)
cv2.resizeWindow("Output color image", 450, 340) 

#read the intial image
#To read in the starting image I use opencv's imread function which takes in a file name
#and outputs that file as a numpy array into the varible image
#I pass in the varible file into the imread function which is holding the file name as a string 
image = cv2.imread(file)

#I use opencv's function imshow to display the image in the windows generated above. 
#In this case I refer to the window named "input color image" and I pass in the varible image from above
cv2.imshow("input color image", image)

#Do things to image
#Convert image to grayscale
#I use opencv's cvtColor function to change the color image to grayscale. The cvtColor function takes in the 
#image numpy array and opencvs cv2.COLOR_BGR2GRAY color conversion code to specify the output
#cv2.COLOR_BGR2GRAY convert between RGB/BGR to gray scale by removing the 
#RGB channels the numpy array changes shape from (680,900,3) -> (680,900) removing the 3 color channels
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#I use opencv's function imshow to display the image in the windows generated above. 
#In this case I refer to the window named "grayscale image" and I pass in the varible gray_image
cv2.imshow("grayscale image", gray_image)

#Convert image to black and white with a threshold value of 90

#90 #threshold for circuit
#160 #threshold for crack
#75 #thrshold for crack2

#To convert the image to black and white I use opencv's threshold function. This function takes the gray scale image, a threshold value
#The maximum pixel value and a threshold technique.
#This function sets all pixel values below the threshold value of 90 to 0 which is black and all pixel values above the pixel value of 90 to the maximum 
#gray scale value of 255 which is white. I use the binary threshold technique which applies the same thrshold to all pixel values. The output of the function 
# is threshold value used and the black_and_white image numpy array.
ret, black_and_white = cv2.threshold(gray_image, 90, 255, cv2.THRESH_BINARY) 

#Displays Image
#I use opencv's function imshow to display the image in the windows generated above. 
#In this case I refer to the window named "black and white image" and I pass in the varible black_and_white for the image itself
cv2.imshow("black and white image", black_and_white)

#Next I use an if/elif statement to seperate light and dark regions
#in the if statement if the user typed in light the result is true and the program will focus on changing light values
#the elif statment is true if the the string for l_or_d is dark and the program will focus on changing the dark values 
#If the user accidently types something other than light or dark the program will trigger the else statement and print 
#"please only type in light or dark"

#For each section I use opencv's function imshow to display the image in the windows generated above. 
#In this case I refer to the window named "Output color image" and I pass in the Red_and_Black varible for the image itself

if l_or_d == "light":
    
    #Convert image from normal color to red on brighter regions
    #Sets all values ==255 to red with RGB value for red being (0,0,255)
    #This takes the image numpy array and changes all values 
    #that are marked as 255 in the binary image numpy array and changes them to the RGB channel
    #Value of red
    image[black_and_white==255] = (0,0,255)
    Red_and_Black = image 
    
    #Displays Image
    cv2.imshow("Output color image", Red_and_Black)

#if the user typed in dark the program will focus on changing dark values
elif l_or_d == "dark":
    
    #Convert image from normal color to red on dark regions
    #Sets all values equal to 0 to red with RGB value for red being (0,0,255)
    #This takes the image numpy array and changes all values 
    #that are marked as 0 in the binary image numpy array and changes them to the RGB channel
    #Value of red
    image[black_and_white==0] = (0,0,255)
    Red_and_Black = image 

    #Displays Image
    cv2.imshow("Output color image", Red_and_Black)


else:
    print("please only type in light or dark")

#Use opencv waitkey function takes in a time in milliseconds however since 0 is passed into the 
# fucntion the program waits for any key to be pressed
cv2.waitKey(0)
# The destoyAllWindows fucntion closes all windows after the script is complete.
cv2.destroyAllWindows()


#Saving images 
#Creating the name of the file string to be the file name + the word grayscale
#Split string on "." to make a list
newname = file.split(".")
#concatenate list of strings and add in name of file (_grayscale, _binary, _output)
filegray = newname[0]+"_grayscale."+newname[1]
filebinary = newname[0]+"_binary."+newname[1]
fileoutput = newname[0]+"_output."+newname[1]
#Use opencv's imwrite function to pass in file name and image that is being saved
cv2.imwrite(filegray,gray_image)
cv2.imwrite(filebinary,black_and_white)
cv2.imwrite(fileoutput,Red_and_Black)