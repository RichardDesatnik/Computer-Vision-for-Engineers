#Import opencv and numpy libraries
import cv2
import numpy as np

#Using python input function to get string input from the user

#Takes in string file name to be used for program
file = input("What file do you want to use? ")

#read the intial image
#To read in the starting image I use opencv's imread function which takes in a file name
#and outputs that file as a numpy array into the varible image
#I pass in the varible file into the imread function which is holding the file name as a string 
image = cv2.imread(file)

#Intializes the while loop at 0, this value goes up each time the user tries a new gamma value
#If the gamma value reaches the maximum number of tries then the while loop breaks
#This just ensures the loop does not run indefinitely 
Not_Satified = 0
Max_Tries = 5

#This function is used to change the numpy array representing the image and return a new numpy array with the modified 
#gamma correction
def gamma_correction(image, gamma):
    #This creates a lookup table for of pixel values that are mapped to their cooresponding gamma values
    #i/255 is scaling the image between values 0 and 1 the pixel is then corrected by the gamma value using the equation 
    # outimage = Input image ^ (1/gamma). The pixels are then rescaled back to 255. The for loop is used to build the 
    #look up table for all pixel values for the range of 0 to 255, np.arange does not include the final 256 value
    #The .astype("uint8") ensures the value ranges from 0 to 255 for the output image table
    table = np.array([((i / 255.0) ** (1/gamma)) * 255 for i in np.arange(0, 256)]).astype("uint8")
    #cv2.lut performs a look-up table transformation to the image array. The output of the function is a new 
    #image array that fills the original image array with values from the gamma table 
    new_image = cv2.LUT(image, table)
    return new_image



while Not_Satified < Max_Tries:

    #Takes in string integer name to be used for program and places
    #it in the varible gamma
    gamma = input("What gamma value do you want to use? ")
    #This converts the varible gamma from a string into a float value 
    # so the code can process the number for the image
    gamma = float(gamma)
    
    #This refers to the change gamma function above and output a new
    #numpy array image with the altered gamma value
    new_image = gamma_correction(image=image,gamma=gamma)

    #To display windows for the user to view the images I use open cv's namedWindow 
    #function as placeholders to display images that are generated by the 
    #program. The winname is the string used to address the window, in this case 
    # my winnames are "Input Image" and "Output image after gamma correction" the flag 
    # cv2.WINDOW_NORMAL enables me to resize the output image manuelly. I used the 
    # cv2.resizeWindow function to specify the size, the resizeWindow
    #function takes in the windows name, width and height of the image

    #saves width, height, and number of channels from image numpy array
    w,h,c = image.shape
    #Display Original Image
    cv2.namedWindow("Input Image", cv2.WINDOW_NORMAL)

    #sets window height and width to half of the original image 
    cv2.resizeWindow("Input Image", int(h/2),int(w/2)) 

    #Image with gamma corrections
    cv2.namedWindow("Output image after gamma correction", cv2.WINDOW_NORMAL)
    cv2.resizeWindow("Output image after gamma correction", int(h/2), int(w/2)) 
    
    #For each iamge I use opencv's function imshow to display the image in the windows generated above. 
    #In this case I refer to the window names "Input Image" and "Output image after gamma correction" 
    #I pass in image and new_image varibles for the numpy array image varibles
    cv2.imshow("Input Image", image)
    cv2.imshow("Output image after gamma correction", new_image)
    
    #Use opencv waitkey function takes in a time in milliseconds however since 0 is passed into the 
    #fucntion the program waits for any key to be pressed
    cv2.waitKey(0)
    #The destoyAllWindows fucntion closes all windows after the script is complete.
    cv2.destroyAllWindows()

    #Takes input from the user as a string, if Satified equals "y"
    #Then the loops breaks.
    Satified = input("Are you satified with this image y or n? ")
    
    #if statment is used to determine if the image is good enough
    #if satified is equal to y then the image that is gamma corrected is satifactory
    #and the loop is broken with a break
    if Satified == "y":
        break
    #the else statement is triggered if satified equals anything other than y
    #The program continues going through the loop and prints "try again" 
    else:
        print("try again")

    #Incrimentally increases not satified to not get stuck in while loop
    Not_Satified = Not_Satified + 1


#Saving images 
#Creating the name of the file string to be the file name + the word _gcorrected
#Split string on "." to make a list
newname = file.split(".")
#concatenate list of strings and add in name of file _gcorrected
filegcorrected = newname[0]+"_gcorrected."+newname[1]
#Use opencv's imwrite function to pass in file name and image that is being saved
cv2.imwrite(filegcorrected,new_image)
